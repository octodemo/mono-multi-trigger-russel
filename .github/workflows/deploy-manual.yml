name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to deploy (comma-separated)'
        required: true
        default: 'service-a,service-b,service-c,service-d,service-e'
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - test1
        - test2
        - prod
      version:
        description: 'Version/tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string
      dry_run:
        description: 'Perform a dry run (no actual deployment)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      services-matrix: ${{ steps.parse.outputs.services-matrix }}
      valid-services: ${{ steps.parse.outputs.valid-services }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Parse and validate services
      id: parse
      run: |
        # Define valid services
        VALID_SERVICES="service-a service-b service-c service-d service-e"
        
        # Parse input services
        IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.services }}"
        
        # Trim whitespace and validate
        VALID_SELECTED=""
        INVALID_SERVICES=""
        
        for service in "${SERVICES[@]}"; do
          service=$(echo "$service" | xargs | sed 's/^"//;s/"$//')  # trim whitespace and remove quotes
          if [[ " $VALID_SERVICES " =~ " $service " ]]; then
            if [ -z "$VALID_SELECTED" ]; then
              VALID_SELECTED="$service"
            else
              VALID_SELECTED="$VALID_SELECTED,$service"
            fi
          else
            if [ -z "$INVALID_SERVICES" ]; then
              INVALID_SERVICES="$service"
            else
              INVALID_SERVICES="$INVALID_SERVICES,$service"
            fi
          fi
        done
        
        if [ -n "$INVALID_SERVICES" ]; then
          echo "❌ Invalid services specified: $INVALID_SERVICES"
          echo "Valid services are: $VALID_SERVICES"
          exit 1
        fi
        
        # Create matrix for parallel deployment
        MATRIX_JSON=$(echo "$VALID_SELECTED" | tr ',' '\n' | jq -R . | jq -s -c .)
        
        echo "services-matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
        echo "valid-services=$VALID_SELECTED" >> $GITHUB_OUTPUT
        
        echo "✅ Valid services to deploy: $VALID_SELECTED"
        echo "📍 Target environment: ${{ github.event.inputs.environment }}"
        echo "🏷️ Version: ${{ github.event.inputs.version }}"
        echo "🧪 Dry run: ${{ github.event.inputs.dry_run }}"

  run-tests:
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: ${{ !cancelled() }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all tests
      run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: [validate-inputs, run-tests]
    if: ${{ !cancelled() && needs.run-tests.result == 'success' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.validate-inputs.outputs.services-matrix) }}
      fail-fast: false
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up deployment environment
      run: |
        echo "🚀 Preparing to deploy ${{ matrix.service }} to ${{ github.event.inputs.environment }}"
        echo "SERVICE=${{ matrix.service }}" >> $GITHUB_ENV
        echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        echo "DRY_RUN=${{ github.event.inputs.dry_run }}" >> $GITHUB_ENV
        
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test specific service
      run: npm run test:${{ matrix.service }}
      
    - name: Build service (if needed)
      run: |
        echo "📦 Building ${{ matrix.service }}..."
        cd services/${{ matrix.service }}
        # In a real scenario, you might run build commands here
        # npm run build
        echo "✅ Build completed for ${{ matrix.service }}"
        
    - name: Deploy to ${{ github.event.inputs.environment }}
      run: |
        echo "🚀 Deploying ${{ matrix.service }} to ${{ github.event.inputs.environment }}..."
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "🧪 DRY RUN: Would deploy ${{ matrix.service }} to ${{ github.event.inputs.environment }}"
          echo "🧪 DRY RUN: Version: ${{ github.event.inputs.version }}"
          echo "🧪 DRY RUN: No actual deployment performed"
        else
          echo "📍 Environment: ${{ github.event.inputs.environment }}"
          echo "🏷️ Version: ${{ github.event.inputs.version }}"
          echo "📦 Service: ${{ matrix.service }}"
          
          # Simulate deployment steps
          echo "  ⏳ Stopping existing service..."
          sleep 2
          echo "  📤 Uploading new version..."
          sleep 3
          echo "  ▶️ Starting service..."
          sleep 2
          echo "  🔍 Health check..."
          sleep 1
          echo "  ✅ Deployment successful!"
          
          # In a real scenario, you would:
          # - Build and push Docker images
          # - Update Kubernetes deployments
          # - Update configuration
          # - Perform health checks
          # - Rollback if needed
        fi
        
    - name: Post-deployment verification
      if: ${{ github.event.inputs.dry_run != 'true' }}
      run: |
        echo "🔍 Verifying deployment of ${{ matrix.service }}..."
        
        # Simulate health check
        echo "  📊 Checking service health..."
        sleep 2
        echo "  ✅ Service is healthy"
        
        echo "  📈 Checking metrics..."
        sleep 1
        echo "  ✅ Metrics look good"
        
        echo "🎉 Deployment verification complete for ${{ matrix.service }}"

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [validate-inputs, run-tests, deploy]
    if: ${{ !cancelled() }}
    steps:
    - name: Deployment Summary
      run: |
        echo "## 📋 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "**Services:** ${{ needs.validate-inputs.outputs.valid-services }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.run-tests.result }}" = "success" ]; then
          echo "✅ **Tests:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ **Deployment:** Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy.result }}" = "failure" ]; then
          echo "❌ **Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏭️ **Deployment:** Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Workflow run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY